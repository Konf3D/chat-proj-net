// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: net_service.proto
#ifndef GRPC_net_5fservice_2eproto__INCLUDED
#define GRPC_net_5fservice_2eproto__INCLUDED

#include "net_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace net_service {

class net_service final {
 public:
  static constexpr char const* service_full_name() {
    return "net_service.net_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::net_service::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> AsyncsignUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(AsyncsignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> PrepareAsyncsignUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(PrepareAsyncsignUpRaw(context, request, cq));
    }
    virtual ::grpc::Status signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::net_service::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> AsyncsignIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(AsyncsignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> PrepareAsyncsignIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(PrepareAsyncsignInRaw(context, request, cq));
    }
    virtual ::grpc::Status signOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> AsyncsignOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(AsyncsignOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> PrepareAsyncsignOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(PrepareAsyncsignOffRaw(context, request, cq));
    }
    virtual ::grpc::Status savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::net_service::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> AsyncsavePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(AsyncsavePublicMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> PrepareAsyncsavePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(PrepareAsyncsavePublicMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::PublicMessageLoad* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>> AsyncgetPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>>(AsyncgetPublicMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>> PrepareAsyncgetPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>>(PrepareAsyncgetPublicMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::net_service::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> AsyncsavePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(AsyncsavePrivateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>> PrepareAsyncsavePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>>(PrepareAsyncsavePrivateMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::PrivateMessageLoad* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>> AsyncgetPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>>(AsyncgetPrivateMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>> PrepareAsyncgetPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>>(PrepareAsyncgetPrivateMessagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void signOff(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void signOff(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* AsyncsignUpRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* AsyncsignInRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* PrepareAsyncsignInRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* AsyncsignOffRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* PrepareAsyncsignOffRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* AsyncsavePublicMessageRaw(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* PrepareAsyncsavePublicMessageRaw(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>* AsyncgetPublicMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PublicMessageLoad>* PrepareAsyncgetPublicMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* AsyncsavePrivateMessageRaw(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::Token>* PrepareAsyncsavePrivateMessageRaw(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>* AsyncgetPrivateMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::net_service::PrivateMessageLoad>* PrepareAsyncgetPrivateMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::net_service::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> AsyncsignUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(AsyncsignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> PrepareAsyncsignUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(PrepareAsyncsignUpRaw(context, request, cq));
    }
    ::grpc::Status signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::net_service::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> AsyncsignIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(AsyncsignInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> PrepareAsyncsignIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(PrepareAsyncsignInRaw(context, request, cq));
    }
    ::grpc::Status signOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> AsyncsignOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(AsyncsignOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> PrepareAsyncsignOff(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(PrepareAsyncsignOffRaw(context, request, cq));
    }
    ::grpc::Status savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::net_service::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> AsyncsavePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(AsyncsavePublicMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> PrepareAsyncsavePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(PrepareAsyncsavePublicMessageRaw(context, request, cq));
    }
    ::grpc::Status getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::PublicMessageLoad* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>> AsyncgetPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>>(AsyncgetPublicMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>> PrepareAsyncgetPublicMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>>(PrepareAsyncgetPublicMessagesRaw(context, request, cq));
    }
    ::grpc::Status savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::net_service::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> AsyncsavePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(AsyncsavePrivateMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>> PrepareAsyncsavePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::Token>>(PrepareAsyncsavePrivateMessageRaw(context, request, cq));
    }
    ::grpc::Status getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::net_service::PrivateMessageLoad* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>> AsyncgetPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>>(AsyncgetPrivateMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>> PrepareAsyncgetPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>>(PrepareAsyncgetPrivateMessagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) override;
      void signUp(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      void signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) override;
      void signIn(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      void signOff(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) override;
      void signOff(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      void savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) override;
      void savePublicMessage(::grpc::ClientContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response, std::function<void(::grpc::Status)>) override;
      void getPublicMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response, ::grpc::ClientUnaryReactor* reactor) override;
      void savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response, std::function<void(::grpc::Status)>) override;
      void savePrivateMessage(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response, std::function<void(::grpc::Status)>) override;
      void getPrivateMessages(::grpc::ClientContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* AsyncsignUpRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* PrepareAsyncsignUpRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignUp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* AsyncsignInRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* PrepareAsyncsignInRaw(::grpc::ClientContext* context, const ::net_service::CredentialsSignIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* AsyncsignOffRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* PrepareAsyncsignOffRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* AsyncsavePublicMessageRaw(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* PrepareAsyncsavePublicMessageRaw(::grpc::ClientContext* context, const ::net_service::PublicMessageSave& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>* AsyncgetPublicMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::PublicMessageLoad>* PrepareAsyncgetPublicMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* AsyncsavePrivateMessageRaw(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::Token>* PrepareAsyncsavePrivateMessageRaw(::grpc::ClientContext* context, const ::net_service::PrivateMessageSave& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>* AsyncgetPrivateMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::net_service::PrivateMessageLoad>* PrepareAsyncgetPrivateMessagesRaw(::grpc::ClientContext* context, const ::net_service::Token& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_signUp_;
    const ::grpc::internal::RpcMethod rpcmethod_signIn_;
    const ::grpc::internal::RpcMethod rpcmethod_signOff_;
    const ::grpc::internal::RpcMethod rpcmethod_savePublicMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_getPublicMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_savePrivateMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_getPrivateMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status signUp(::grpc::ServerContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response);
    virtual ::grpc::Status signIn(::grpc::ServerContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response);
    virtual ::grpc::Status signOff(::grpc::ServerContext* context, const ::net_service::Token* request, ::net_service::Token* response);
    virtual ::grpc::Status savePublicMessage(::grpc::ServerContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response);
    virtual ::grpc::Status getPublicMessages(::grpc::ServerContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response);
    virtual ::grpc::Status savePrivateMessage(::grpc::ServerContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response);
    virtual ::grpc::Status getPrivateMessages(::grpc::ServerContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_signUp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignUp(::grpc::ServerContext* context, ::net_service::CredentialsSignUp* request, ::grpc::ServerAsyncResponseWriter< ::net_service::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_signIn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignIn(::grpc::ServerContext* context, ::net_service::CredentialsSignIn* request, ::grpc::ServerAsyncResponseWriter< ::net_service::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_signOff() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignOff(::grpc::ServerContext* context, ::net_service::Token* request, ::grpc::ServerAsyncResponseWriter< ::net_service::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsavePublicMessage(::grpc::ServerContext* context, ::net_service::PublicMessageSave* request, ::grpc::ServerAsyncResponseWriter< ::net_service::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPublicMessages(::grpc::ServerContext* context, ::net_service::Token* request, ::grpc::ServerAsyncResponseWriter< ::net_service::PublicMessageLoad>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsavePrivateMessage(::grpc::ServerContext* context, ::net_service::PrivateMessageSave* request, ::grpc::ServerAsyncResponseWriter< ::net_service::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPrivateMessages(::grpc::ServerContext* context, ::net_service::Token* request, ::grpc::ServerAsyncResponseWriter< ::net_service::PrivateMessageLoad>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_signUp<WithAsyncMethod_signIn<WithAsyncMethod_signOff<WithAsyncMethod_savePublicMessage<WithAsyncMethod_getPublicMessages<WithAsyncMethod_savePrivateMessage<WithAsyncMethod_getPrivateMessages<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_signUp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::CredentialsSignUp, ::net_service::Token>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::CredentialsSignUp* request, ::net_service::Token* response) { return this->signUp(context, request, response); }));}
    void SetMessageAllocatorFor_signUp(
        ::grpc::MessageAllocator< ::net_service::CredentialsSignUp, ::net_service::Token>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::CredentialsSignUp, ::net_service::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signUp(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_signIn() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::CredentialsSignIn, ::net_service::Token>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::CredentialsSignIn* request, ::net_service::Token* response) { return this->signIn(context, request, response); }));}
    void SetMessageAllocatorFor_signIn(
        ::grpc::MessageAllocator< ::net_service::CredentialsSignIn, ::net_service::Token>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::CredentialsSignIn, ::net_service::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signIn(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_signOff() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::Token>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::Token* request, ::net_service::Token* response) { return this->signOff(context, request, response); }));}
    void SetMessageAllocatorFor_signOff(
        ::grpc::MessageAllocator< ::net_service::Token, ::net_service::Token>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signOff(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::PublicMessageSave, ::net_service::Token>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::PublicMessageSave* request, ::net_service::Token* response) { return this->savePublicMessage(context, request, response); }));}
    void SetMessageAllocatorFor_savePublicMessage(
        ::grpc::MessageAllocator< ::net_service::PublicMessageSave, ::net_service::Token>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::PublicMessageSave, ::net_service::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* savePublicMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::PublicMessageLoad>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::Token* request, ::net_service::PublicMessageLoad* response) { return this->getPublicMessages(context, request, response); }));}
    void SetMessageAllocatorFor_getPublicMessages(
        ::grpc::MessageAllocator< ::net_service::Token, ::net_service::PublicMessageLoad>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::PublicMessageLoad>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPublicMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::PrivateMessageSave, ::net_service::Token>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::PrivateMessageSave* request, ::net_service::Token* response) { return this->savePrivateMessage(context, request, response); }));}
    void SetMessageAllocatorFor_savePrivateMessage(
        ::grpc::MessageAllocator< ::net_service::PrivateMessageSave, ::net_service::Token>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::PrivateMessageSave, ::net_service::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* savePrivateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::PrivateMessageLoad>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::net_service::Token* request, ::net_service::PrivateMessageLoad* response) { return this->getPrivateMessages(context, request, response); }));}
    void SetMessageAllocatorFor_getPrivateMessages(
        ::grpc::MessageAllocator< ::net_service::Token, ::net_service::PrivateMessageLoad>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::net_service::Token, ::net_service::PrivateMessageLoad>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPrivateMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_signUp<WithCallbackMethod_signIn<WithCallbackMethod_signOff<WithCallbackMethod_savePublicMessage<WithCallbackMethod_getPublicMessages<WithCallbackMethod_savePrivateMessage<WithCallbackMethod_getPrivateMessages<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_signUp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_signIn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_signOff() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_signUp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_signIn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_signOff() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsignOff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsavePublicMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPublicMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsavePrivateMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPrivateMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_signUp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->signUp(context, request, response); }));
    }
    ~WithRawCallbackMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signUp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_signIn() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->signIn(context, request, response); }));
    }
    ~WithRawCallbackMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_signOff() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->signOff(context, request, response); }));
    }
    ~WithRawCallbackMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* signOff(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->savePublicMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* savePublicMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPublicMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPublicMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->savePrivateMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* savePrivateMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPrivateMessages(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPrivateMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_signUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_signUp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::CredentialsSignUp, ::net_service::Token>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::CredentialsSignUp, ::net_service::Token>* streamer) {
                       return this->StreamedsignUp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_signUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status signUp(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignUp* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsignUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::CredentialsSignUp,::net_service::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_signIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_signIn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::CredentialsSignIn, ::net_service::Token>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::CredentialsSignIn, ::net_service::Token>* streamer) {
                       return this->StreamedsignIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_signIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status signIn(::grpc::ServerContext* /*context*/, const ::net_service::CredentialsSignIn* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsignIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::CredentialsSignIn,::net_service::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_signOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_signOff() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::Token, ::net_service::Token>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::Token, ::net_service::Token>* streamer) {
                       return this->StreamedsignOff(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_signOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status signOff(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsignOff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::Token,::net_service::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_savePublicMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_savePublicMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::PublicMessageSave, ::net_service::Token>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::PublicMessageSave, ::net_service::Token>* streamer) {
                       return this->StreamedsavePublicMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_savePublicMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status savePublicMessage(::grpc::ServerContext* /*context*/, const ::net_service::PublicMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsavePublicMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::PublicMessageSave,::net_service::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPublicMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPublicMessages() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::Token, ::net_service::PublicMessageLoad>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::Token, ::net_service::PublicMessageLoad>* streamer) {
                       return this->StreamedgetPublicMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPublicMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPublicMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PublicMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPublicMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::Token,::net_service::PublicMessageLoad>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_savePrivateMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_savePrivateMessage() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::PrivateMessageSave, ::net_service::Token>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::PrivateMessageSave, ::net_service::Token>* streamer) {
                       return this->StreamedsavePrivateMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_savePrivateMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status savePrivateMessage(::grpc::ServerContext* /*context*/, const ::net_service::PrivateMessageSave* /*request*/, ::net_service::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsavePrivateMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::PrivateMessageSave,::net_service::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPrivateMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPrivateMessages() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::net_service::Token, ::net_service::PrivateMessageLoad>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::net_service::Token, ::net_service::PrivateMessageLoad>* streamer) {
                       return this->StreamedgetPrivateMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPrivateMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPrivateMessages(::grpc::ServerContext* /*context*/, const ::net_service::Token* /*request*/, ::net_service::PrivateMessageLoad* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPrivateMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::net_service::Token,::net_service::PrivateMessageLoad>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_signUp<WithStreamedUnaryMethod_signIn<WithStreamedUnaryMethod_signOff<WithStreamedUnaryMethod_savePublicMessage<WithStreamedUnaryMethod_getPublicMessages<WithStreamedUnaryMethod_savePrivateMessage<WithStreamedUnaryMethod_getPrivateMessages<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_signUp<WithStreamedUnaryMethod_signIn<WithStreamedUnaryMethod_signOff<WithStreamedUnaryMethod_savePublicMessage<WithStreamedUnaryMethod_getPublicMessages<WithStreamedUnaryMethod_savePrivateMessage<WithStreamedUnaryMethod_getPrivateMessages<Service > > > > > > > StreamedService;
};

}  // namespace net_service


#endif  // GRPC_net_5fservice_2eproto__INCLUDED
